{"version":3,"sources":["actions/actions.js","actiontypes/index.js","containers/CounterDisplay.js","containers/Counter.js","App.js","serviceWorker.js","reduces/counterReducer.js","reduces/index.js","store/index.js","index.js"],"names":["addToCounter","type","subtractCounter","CounterDisplay","react_default","a","createElement","style","backgroundColor","this","props","counter","Component","connect","state","counterReducer","Counter","add","_this","onClick","containers_CounterDisplay","dispatch","App","containers_Counter","Boolean","window","location","hostname","match","initalState","highscore","rootReducer","combineReducers","arguments","length","undefined","Object","objectSpread","store","createStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gPAEaA,EAAe,WACxB,MAAO,CACHC,KCHsB,mBDQjBC,EAAkB,WAC3B,MAAO,CACHD,KCT2B,wBCE7BE,mLAGF,OACEC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,gBAAiB,SAC7BJ,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,cAAMG,KAAKC,MAAMC,iBANIC,aAkBdC,kBAJf,SAAyBC,GACvB,MAAO,CAAEH,QAASG,EAAMC,eAAeJ,UAKvC,KAFaE,CAGbV,GClBIa,gLAGHP,KAAKC,MAAMO,gDAIRR,KAAKC,MAAMR,mDAGN,IAAAgB,EAAAT,KACP,OACEL,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,gBAAgB,SAC7BJ,EAAAC,EAAAC,cAAA,uBACEF,EAAAC,EAAAC,cAAA,UAAQa,QAAS,kBAAMD,EAAKD,QAA5B,UACAb,EAAAC,EAAAC,cAAA,UAAQa,QAAS,kBAAMD,EAAKhB,oBAA5B,cACAE,EAAAC,EAAAC,cAACc,EAAD,cAhBcR,aAqCPC,kBAbf,SAAyBC,GACvB,MAAO,CACJH,QAAUG,EAAMC,iBAIrB,SAA4BM,GAC1B,MAAO,CACLJ,IAAK,kBAAMI,EAASrB,MACpBE,gBAAiB,kBAAMmB,EAASnB,QAIrBW,CAA8CG,GC1B9CM,mLAVX,OACElB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACiB,EAAD,cANUX,aCQEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,8EChBFC,EAAc,CACdlB,QAAU,EACVmB,UAAY,GCKDC,EALKC,YAAgB,CAClCjB,eDG4B,WAAqC,IAApCD,EAAoCmB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA5BJ,EACjC,QAD6DI,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAL,GAC1ChC,MACV,ILToB,iBKUpB,OAAOmC,OAAAC,EAAA,EAAAD,CAAA,GAAKtB,EAAZ,CAAoBH,QAAUG,EAAMH,QAAU,IAC9C,ILVyB,sBKWzB,OAAOyB,OAAAC,EAAA,EAAAD,CAAA,GAAItB,EAAX,CAAmBH,QAAUG,EAAMH,QAAS,IAC9C,QACE,OAAOG,METFwB,EAFDC,YAAYR,GCK1BS,IAASC,OAAQrC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAUJ,MAAOA,GAC9BlC,EAAAC,EAAAC,cAACqC,EAAD,OAEEC,SAASC,eAAe,SJqHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4088362a.chunk.js","sourcesContent":["import * as actions from '../actiontypes';\n\nexport const addToCounter = () => {\n    return {\n        type: actions.ADD_TO_COUNTER,\n        \n    }\n}\n\nexport const subtractCounter = () => {\n    return {\n        type : actions.SUBTRACT_TO_COUNTER,\n    }\n}\n   ","export const SEND_SUBSCRIPTION = \"SEND_SUBSCRIPTION\";\nexport const ADD_TO_COUNTER = \"ADD_TO_COUNTER\";\nexport const SUBTRACT_TO_COUNTER = \"SUBTRACT_TO_COUNTER\";\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nclass CounterDisplay extends Component {\n  render() {\n\n    return (\n      <div style={{ backgroundColor: \"grey\" }}>\n        <h1> Counter result</h1>\n        <h1> {this.props.counter}</h1>\n      </div>\n    );\n  }\n}\n\nCounterDisplay.propTypes = {};\n\nfunction mapStateToProps(state) {\n  return { counter: state.counterReducer.counter };\n}\n\nexport default connect(\n  mapStateToProps,\n  null\n)(CounterDisplay);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { addToCounter , subtractCounter} from \"../actions/actions\";\nimport CounterDisplay from './CounterDisplay'\n\n\nclass Counter extends Component {\n  \n  add() {\n   this.props.add()\n  }\n\n  subtractCounter(){\n      this.props.subtractCounter()\n  }\n\n  render() {\n    return (\n      <div style={{backgroundColor:\"blue\"}}>\n      <h1> Counter </h1>\n        <button onClick={() => this.add()}> plus </button>\n        <button onClick={() => this.subtractCounter()}> subtract </button>\n        <CounterDisplay />\n      </div>\n    );\n  }\n}\n\nCounter.propTypes = {};\n\nfunction mapStateToProps(state) {\n  return {\n     counter : state.counterReducer\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    add: () => dispatch(addToCounter()),\n    subtractCounter: () => dispatch(subtractCounter()),\n  };\n}\n\nexport default connect(mapStateToProps , mapDispatchToProps)(Counter);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Counter from \"./containers/Counter\";\n\nclass App extends Component {\n\n\n  render() {\n    return (\n      <div>\n        <Counter />\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ADD_TO_COUNTER , SUBTRACT_TO_COUNTER} from '../actiontypes';\n\nlet initalState = {\n    counter : 0,\n    highscore : 0\n}\n  \n  \n  export let counterReducer = (state = initalState , action = 0) =>{\n      switch(action.type){\n          case ADD_TO_COUNTER: \n          return { ...state , counter : state.counter + 1};\n          case SUBTRACT_TO_COUNTER:\n          return {...state , counter : state.counter -1 }\n        default:\n          return state;\n    \n      }\n  \n  }","\nimport {counterReducer} from './counterReducer';\nimport { combineReducers } from \"redux\";\n\nconst rootReducer = combineReducers({\n  counterReducer: counterReducer\n});\n\n\nexport default rootReducer;\n","import { createStore } from \"redux\";\n\nimport rootReducer from \"../reduces\";\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport store from './store';\n\n\nReactDOM.render( <Provider store={store}>\n    <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}